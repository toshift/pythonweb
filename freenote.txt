* UTF-8の場合は、日本語1文字が3バイトとなります
* 文字列もシーケンス型の一つです
* スライスのインデックス -1 は後ろから1番目　インデックスを省略すると最後のスライス
* 長整数型は数値の末尾に「l」又は「L」を付けます整数と同じですが、扱うことが出来る桁数の限度がなくなります。(メモリによる制限はあり)。
** 通常の整数でも桁数をオーバーしたら自動で長整数型にへんかんされる
* 数値は10進数の他16進数（先頭に0x)8進数(先頭に0)で表すこともできる
* 2進数は"0b"をつけて記述 0b101 2進数に変換する場合はbin()を使用する
* XOR ^ は繰り上がりを行わない足し算　同じ値で2回XORすると元の値に戻る
* 16進数に変換するにはhex()を使う
* 2.5e5とは2.5x10の5乗 3.1e-4とは3.1x10の-4乗
* 虚数は実数部が0.0の複素数,数値の末尾にj又はJをつける 4.0j 2.5e5j 等
* べき乗 ** 除算 // (演算結果は小数点以下は切り捨てられる)

## 演算子優先順位
```
(優先順位が高い)
  +  -  ~x      (+と-は単項演算子)
  **
  *  /  %  //
  +  -
  <<  >>
  &
  ^
  |
  <  <=  >  >=  ==  !=  <>  is  is not  in  not in
  not
  and
  or
(優先順位が低い)
```
* ビットXORは演算子の左辺と右辺の同じ位置にあるビットを比較して、ビットの値が異なる場合にだけ「1」にします。
* Pythonにおいては整数の桁が無制限になっているので反転を行う限度が無い、そのため以下のように定められている
-(a + 1)

* 2進数において、左へ１つビットをシフトさせることは値を2倍にする事に相当し、右へ1つビットをシフトさせる事は値を1/2にすることに相当。
* int()は基数(10進数とか)を指定できる
```
print int("11",10)    # 11 (10進数)
print int("13",16)    # 19 (16進数)
```

* 変数にはオブジェクトの参照(ポインタ)だけが保存される。代入ステートメント

* pythonの予約語一覧
+---------------------------------------------+
and del for is raise assert elif from lambda 
return break else global not try class except
if or while continue exec import pass yield def
finally in print
+---------------------------------------------+

* 新しく別のオブジェクトを参照しただけでは、既存の参照側の値は変わらない。
```
var1 = 25
var2 = var1
var1 = 30
print var1 # 30
print var2 # 25
```

* 累算代入文 同じ変数に演算結果を改めて代入する(ビットはビット)
+---------------------------------------------

+= -= *= /= //= %= **= >>= <<= &= ^= |=

+---------------------------------------------

* 真偽について
-- 数値型の場合は 0, 0.0, 0j は偽 0以外は真
-- 文字列型の場合は空文字は偽 それ以外は真
-- 空のタプル、リスト、辞書は偽 それ以外は真
-- Boolean型の「True」は真
-- Boolean型の「False」は偽
-- NoneType型の「None」は偽
* True + 1 = 2 wow



